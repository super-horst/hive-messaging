syntax = "proto3";

package messages;

import "common.proto";

// Messages service definition.
service Messages {

  rpc GetMessages (MessageFilter) returns (Envelope);

  rpc SendMessage (Envelope) returns (MessageSendResult);

}

message MessageFilter {
  enum State {
    UNKNOWN = 0;
    NEW = 1;
  }

  State state = 1;
  common.Peer dst = 2;
}

message EncryptionParameters {
  bytes ratchet_key = 1;
  uint64 chain_idx = 2;
  uint64 prev_chain_count = 3;
}

message KeyExchange {
  common.Peer origin = 1 ;
  bytes ephemeral_key = 2;
  bytes one_time_key = 3;
}

message PayloadHeader {
  string identifier = 1;
}

message Payload {
  PayloadHeader header = 1;
  bytes payload = 2;
}

message Envelope {
  common.Peer dst = 1;

  EncryptionParameters params = 2;
  KeyExchange key_exchange = 3;

  bytes encrypted_payload = 10;
}

message MessagePayload {
  string message = 1;
}

message MessageSendResult {
  //TODO
}
